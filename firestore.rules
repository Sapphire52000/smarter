rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 인증 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 자신의 문서인지 확인
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // 학원장(관리자) 확인
    function isAcademyOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'academyOwner';
    }
    
    // 선생님 확인
    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    // 특정 학원 소속인지 확인
    function isMemberOfAcademy(academyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.academyId == academyId;
    }
    
    // 사용자 문서 규칙
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAcademyOwner());
      allow write: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAcademyOwner());
    }
    
    // 학생 문서 규칙
    match /students/{studentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow update: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow delete: if isAuthenticated() && isAcademyOwner();
    }
    
    // 반 문서 규칙
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow update: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow delete: if isAuthenticated() && isAcademyOwner();
    }
    
    // 출석 문서 규칙
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow update: if isAuthenticated() && (isAcademyOwner() || isTeacher());
      allow delete: if isAuthenticated() && isAcademyOwner();
    }
    
    // 채팅방 문서 규칙
    match /chatRooms/{chatRoomId} {
      allow read: if isAuthenticated() && (
        resource.data.teacherId == request.auth.uid || 
        resource.data.parentId == request.auth.uid ||
        isAcademyOwner()
      );
      allow create: if isAuthenticated() && isTeacher();
      allow update: if isAuthenticated() && (
        resource.data.teacherId == request.auth.uid || 
        resource.data.parentId == request.auth.uid
      );
      allow delete: if isAuthenticated() && isAcademyOwner();
    }
    
    // 채팅 메시지 문서 규칙
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid ||
        isAcademyOwner()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.senderId == request.auth.uid || isAcademyOwner());
    }
    
    // 일정 문서 규칙
    match /schedules/{scheduleId} {
      allow read: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        isAcademyOwner() ||
        isTeacher()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAcademyOwner() ||
        isTeacher()
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAcademyOwner()
      );
    }
  }
} 